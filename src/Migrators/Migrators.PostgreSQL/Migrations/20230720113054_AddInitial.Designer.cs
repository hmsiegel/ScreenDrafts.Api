// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScreenDrafts.Api.Persistence;

#nullable disable

namespace Migrators.PostgreSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230720113054_AddInitial")]
    partial class AddInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_UserClaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_UserClaims_userId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginProvider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("providerKey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("providerDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pK_UserLogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_UserLogins_userId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("roleId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pK_UserRoles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("iX_UserRoles_roleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginProvider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pK_UserTokens");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.CastMemberAggregate.CastMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOnUtc");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("imdbId");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOnUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_CastMembers");

                    b.ToTable("CastMembers", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.CrewMemberAggregate.CrewMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOnUtc");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("imdbId");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOnUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_CrewMembers");

                    b.ToTable("CrewMembers", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DraftAggregate.Draft", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOnUtc");

                    b.Property<string>("DraftType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("draftType");

                    b.Property<string>("EpisodeNumber")
                        .HasColumnType("text")
                        .HasColumnName("episodeNumber");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOnUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("NumberOfDrafters")
                        .HasColumnType("integer")
                        .HasColumnName("numberOfDrafters");

                    b.Property<int?>("NumberOfFilms")
                        .HasColumnType("integer")
                        .HasColumnName("numberOfFilms");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("releaseDate");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer")
                        .HasColumnName("runtime");

                    b.HasKey("Id")
                        .HasName("pK_Drafts");

                    b.ToTable("Drafts", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencyStamp");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedName");

                    b.HasKey("Id")
                        .HasName("pK_Roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimValue");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdDate");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roleId");

                    b.HasKey("Id")
                        .HasName("pK_RoleClaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("iX_RoleClaims_roleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencyStamp");

                    b.Property<Guid?>("DrafterId")
                        .HasColumnType("uuid")
                        .HasColumnName("drafterId");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailConfirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstName");

                    b.Property<Guid?>("HostId")
                        .HasColumnType("uuid")
                        .HasColumnName("hostId");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("imageUrl");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isActive");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedUserName");

                    b.Property<string>("ObjectId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("objectId");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phoneNumberConfirmed");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refreshToken");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refreshTokenExpiryTime");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("securityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("userName");

                    b.HasKey("Id")
                        .HasName("pK_Users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.Entities.Drafter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOnUtc");

                    b.Property<bool?>("HasRolloverVeto")
                        .HasColumnType("boolean")
                        .HasColumnName("hasRolloverVeto");

                    b.Property<bool?>("HasRolloverVetooverride")
                        .HasColumnType("boolean")
                        .HasColumnName("hasRolloverVetooverride");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOnUtc");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_Drafters");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_Drafters_userId");

                    b.ToTable("Drafters", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.Entities.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOnUtc");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOnUtc");

                    b.Property<int?>("PredictionPoints")
                        .HasColumnType("integer")
                        .HasColumnName("predictionPoints");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_Hosts");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_Hosts_userId");

                    b.ToTable("Hosts", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.MovieAggregate.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOnUtc");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("ImdbUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("imdbUrl");

                    b.Property<bool?>("IsInMarqueeOfFame")
                        .HasColumnType("boolean")
                        .HasColumnName("isInMarqueeOfFame");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOnUtc");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("Year")
                        .HasColumnType("text")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pK_Movies");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Persistence.Auditing.Trail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text")
                        .HasColumnName("affectedColumns");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("NewValues")
                        .HasColumnType("text")
                        .HasColumnName("newValues");

                    b.Property<string>("OldValues")
                        .HasColumnType("text")
                        .HasColumnName("oldValues");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("text")
                        .HasColumnName("primaryKey");

                    b.Property<string>("TableName")
                        .HasColumnType("text")
                        .HasColumnName("tableName");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_auditTrails");

                    b.ToTable("auditTrails", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserClaims_Users_userId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserLogins_Users_userId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserRoles_Roles_roleId");

                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserRoles_Users_userId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserTokens_Users_userId");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DraftAggregate.Draft", b =>
                {
                    b.OwnsMany("ScreenDrafts.Api.Domain.DraftAggregate.Entities.SelectedMovie", "SelectedMovies", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("SelectedMovieId");

                            b1.Property<Guid>("DraftId")
                                .HasColumnType("uuid")
                                .HasColumnName("draftId");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("uuid")
                                .HasColumnName("createdBy");

                            b1.Property<DateTime>("CreatedOnUtc")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("createdOnUtc");

                            b1.Property<int>("DraftPosition")
                                .HasColumnType("integer")
                                .HasColumnName("draftPosition");

                            b1.Property<Guid?>("ModifiedBy")
                                .HasColumnType("uuid")
                                .HasColumnName("modifiedBy");

                            b1.Property<DateTime?>("ModifiedOnUtc")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("modifiedOnUtc");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid")
                                .HasColumnName("MovieId");

                            b1.HasKey("Id", "DraftId")
                                .HasName("pK_SelectedMovies");

                            b1.HasIndex("DraftId")
                                .HasDatabaseName("iX_SelectedMovies_draftId");

                            b1.ToTable("SelectedMovies", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DraftId")
                                .HasConstraintName("fK_SelectedMovies_Drafts_draftId");

                            b1.OwnsMany("ScreenDrafts.Api.Domain.DraftAggregate.Entities.PickDecision", "PickDecisions", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uuid")
                                        .HasColumnName("PickDecisionId");

                                    b2.Property<Guid>("DraftId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("draftId");

                                    b2.Property<Guid>("SelectedMovieId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("selectedMovieId");

                                    b2.Property<string>("Decision")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("decision");

                                    b2.Property<Guid>("UserId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("UserId");

                                    b2.HasKey("Id", "DraftId", "SelectedMovieId")
                                        .HasName("pK_PickDecisions");

                                    b2.HasIndex("SelectedMovieId", "DraftId")
                                        .HasDatabaseName("iX_PickDecisions_selectedMovieId_draftId");

                                    b2.ToTable("PickDecisions", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("SelectedMovieId", "DraftId")
                                        .HasConstraintName("fK_PickDecisions_SelectedMovies_selectedMovieId_DraftId");
                                });

                            b1.Navigation("PickDecisions");
                        });

                    b.OwnsMany("ScreenDrafts.Api.Domain.Identity.ValueObjects.DrafterId", "DrafterIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("DraftId")
                                .HasColumnType("uuid")
                                .HasColumnName("draftId");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("DrafterId");

                            b1.HasKey("Id")
                                .HasName("pK_DraftDrafterIds");

                            b1.HasIndex("DraftId")
                                .HasDatabaseName("iX_DraftDrafterIds_draftId");

                            b1.ToTable("DraftDrafterIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DraftId")
                                .HasConstraintName("fK_DraftDrafterIds_Drafts_draftId");
                        });

                    b.OwnsMany("ScreenDrafts.Api.Domain.Identity.ValueObjects.HostId", "HostIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("DraftId")
                                .HasColumnType("uuid")
                                .HasColumnName("draftId");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("HostId");

                            b1.HasKey("Id")
                                .HasName("pK_DraftHostIds");

                            b1.HasIndex("DraftId")
                                .HasDatabaseName("iX_DraftHostIds_draftId");

                            b1.ToTable("DraftHostIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DraftId")
                                .HasConstraintName("fK_DraftHostIds_Drafts_draftId");
                        });

                    b.Navigation("DrafterIds");

                    b.Navigation("HostIds");

                    b.Navigation("SelectedMovies");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_RoleClaims_AspNetRoles_roleId");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.Entities.Drafter", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_Drafters_AspNetUsers_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.Entities.Host", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_Hosts_AspNetUsers_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.MovieAggregate.Movie", b =>
                {
                    b.OwnsMany("ScreenDrafts.Api.Domain.MovieAggregate.Entities.MovieCastMember", "Cast", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("MovieCastId");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid")
                                .HasColumnName("movieId");

                            b1.Property<Guid>("CastMemberId")
                                .HasColumnType("uuid")
                                .HasColumnName("castMemberId");

                            b1.Property<string>("RoleDescription")
                                .HasColumnType("text")
                                .HasColumnName("roleDescription");

                            b1.HasKey("Id", "MovieId")
                                .HasName("pK_MovieCast");

                            b1.HasIndex("MovieId")
                                .HasDatabaseName("iX_MovieCast_movieId");

                            b1.ToTable("MovieCast", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId")
                                .HasConstraintName("fK_MovieCast_Movies_movieId");
                        });

                    b.OwnsMany("ScreenDrafts.Api.Domain.MovieAggregate.Entities.MovieCrewMember", "Directors", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("DirectorId");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid")
                                .HasColumnName("movieId");

                            b1.Property<Guid>("CrewMemberId")
                                .HasColumnType("uuid")
                                .HasColumnName("crewMemberId");

                            b1.Property<string>("JobDescription")
                                .HasColumnType("text")
                                .HasColumnName("jobDescription");

                            b1.HasKey("Id", "MovieId")
                                .HasName("pK_MovieDirectors");

                            b1.HasIndex("MovieId")
                                .HasDatabaseName("iX_MovieDirectors_movieId");

                            b1.ToTable("MovieDirectors", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId")
                                .HasConstraintName("fK_MovieDirectors_Movies_movieId");
                        });

                    b.OwnsMany("ScreenDrafts.Api.Domain.MovieAggregate.Entities.MovieCrewMember", "Producers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("ProducerId");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid")
                                .HasColumnName("movieId");

                            b1.Property<Guid>("CrewMemberId")
                                .HasColumnType("uuid")
                                .HasColumnName("crewMemberId");

                            b1.Property<string>("JobDescription")
                                .HasColumnType("text")
                                .HasColumnName("jobDescription");

                            b1.HasKey("Id", "MovieId")
                                .HasName("pK_MovieProducers");

                            b1.HasIndex("MovieId")
                                .HasDatabaseName("iX_MovieProducers_movieId");

                            b1.ToTable("MovieProducers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId")
                                .HasConstraintName("fK_MovieProducers_Movies_movieId");
                        });

                    b.OwnsMany("ScreenDrafts.Api.Domain.MovieAggregate.Entities.MovieCrewMember", "Writers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("WriterId");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid")
                                .HasColumnName("movieId");

                            b1.Property<Guid>("CrewMemberId")
                                .HasColumnType("uuid")
                                .HasColumnName("crewMemberId");

                            b1.Property<string>("JobDescription")
                                .HasColumnType("text")
                                .HasColumnName("jobDescription");

                            b1.HasKey("Id", "MovieId")
                                .HasName("pK_MovieWriters");

                            b1.HasIndex("MovieId")
                                .HasDatabaseName("iX_MovieWriters_movieId");

                            b1.ToTable("MovieWriters", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId")
                                .HasConstraintName("fK_MovieWriters_Movies_movieId");
                        });

                    b.Navigation("Cast");

                    b.Navigation("Directors");

                    b.Navigation("Producers");

                    b.Navigation("Writers");
                });
#pragma warning restore 612, 618
        }
    }
}
