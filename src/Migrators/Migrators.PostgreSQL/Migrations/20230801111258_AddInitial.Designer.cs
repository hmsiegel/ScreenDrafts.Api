// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScreenDrafts.Api.Persistence;

#nullable disable

namespace Migrators.PostgreSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230801111258_AddInitial")]
    partial class AddInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.CastMemberAggregate.CastMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("CastMembers", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.CrewMemberAggregate.CrewMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("CrewMembers", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DraftAggregate.Draft", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DraftType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EpisodeNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("NumberOfDrafters")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfFilms")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Drafts", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("DrafterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<Guid?>("HostId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ObjectId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.Entities.Drafter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("HasRolloverVeto")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasRolloverVetooverride")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Drafters", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.Entities.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PredictionPoints")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Hosts", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.MovieAggregate.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ImdbUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool?>("IsInMarqueeOfFame")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Year")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Persistence.Auditing.Trail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DraftAggregate.Draft", b =>
                {
                    b.OwnsMany("ScreenDrafts.Api.Domain.DraftAggregate.Entities.Pick", "Picks", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("PickId");

                            b1.Property<Guid>("DraftId")
                                .HasColumnType("uuid");

                            b1.Property<int>("DraftPosition")
                                .HasColumnType("integer");

                            b1.HasKey("Id", "DraftId");

                            b1.HasIndex("DraftId");

                            b1.ToTable("Picks", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DraftId");

                            b1.OwnsMany("ScreenDrafts.Api.Domain.DraftAggregate.Entities.PickDecision", "PickDecisions", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uuid")
                                        .HasColumnName("PickDecisionId");

                                    b2.Property<Guid>("DraftId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("PickId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("DrafterId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("DrafterId");

                                    b2.Property<Guid>("MovieId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("MovieId");

                                    b2.HasKey("Id", "DraftId", "PickId");

                                    b2.HasIndex("PickId", "DraftId");

                                    b2.ToTable("PickDecisions", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("PickId", "DraftId");

                                    b2.OwnsMany("ScreenDrafts.Api.Domain.DraftAggregate.Entities.BlessingDecision", "BlessingDecisions", b3 =>
                                        {
                                            b3.Property<Guid>("Id")
                                                .HasColumnType("uuid")
                                                .HasColumnName("BlessingDecisionId");

                                            b3.Property<Guid>("DraftId")
                                                .HasColumnType("uuid");

                                            b3.Property<Guid>("PickDecisionId")
                                                .HasColumnType("uuid");

                                            b3.Property<Guid>("PickId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("BlessingUsed")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<Guid>("DrafterId")
                                                .HasColumnType("uuid")
                                                .HasColumnName("DrafterId");

                                            b3.HasKey("Id", "DraftId", "PickDecisionId", "PickId");

                                            b3.HasIndex("PickDecisionId", "DraftId", "PickId");

                                            b3.ToTable("BlessingDecisions", (string)null);

                                            b3.WithOwner()
                                                .HasForeignKey("PickDecisionId", "DraftId", "PickId");
                                        });

                                    b2.Navigation("BlessingDecisions");
                                });

                            b1.Navigation("PickDecisions");
                        });

                    b.OwnsMany("ScreenDrafts.Api.Domain.Identity.ValueObjects.DrafterId", "DrafterIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("DraftId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("DrafterId");

                            b1.HasKey("Id");

                            b1.HasIndex("DraftId");

                            b1.ToTable("DraftDrafterIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DraftId");
                        });

                    b.OwnsMany("ScreenDrafts.Api.Domain.Identity.ValueObjects.HostId", "HostIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("DraftId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("HostId");

                            b1.HasKey("Id");

                            b1.HasIndex("DraftId");

                            b1.ToTable("DraftHostIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DraftId");
                        });

                    b.Navigation("DrafterIds");

                    b.Navigation("HostIds");

                    b.Navigation("Picks");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.Entities.Drafter", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.Entities.Host", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.MovieAggregate.Movie", b =>
                {
                    b.OwnsMany("ScreenDrafts.Api.Domain.MovieAggregate.Entities.MovieCastMember", "Cast", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("MovieCastId");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CastMemberId")
                                .HasColumnType("uuid");

                            b1.Property<string>("RoleDescription")
                                .HasColumnType("text");

                            b1.HasKey("Id", "MovieId");

                            b1.HasIndex("MovieId");

                            b1.ToTable("MovieCast", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsMany("ScreenDrafts.Api.Domain.MovieAggregate.Entities.MovieCrewMember", "Directors", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("DirectorId");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CrewMemberId")
                                .HasColumnType("uuid");

                            b1.Property<string>("JobDescription")
                                .HasColumnType("text");

                            b1.HasKey("Id", "MovieId");

                            b1.HasIndex("MovieId");

                            b1.ToTable("MovieDirectors", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsMany("ScreenDrafts.Api.Domain.MovieAggregate.Entities.MovieCrewMember", "Producers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("ProducerId");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CrewMemberId")
                                .HasColumnType("uuid");

                            b1.Property<string>("JobDescription")
                                .HasColumnType("text");

                            b1.HasKey("Id", "MovieId");

                            b1.HasIndex("MovieId");

                            b1.ToTable("MovieProducers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsMany("ScreenDrafts.Api.Domain.MovieAggregate.Entities.MovieCrewMember", "Writers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("WriterId");

                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CrewMemberId")
                                .HasColumnType("uuid");

                            b1.Property<string>("JobDescription")
                                .HasColumnType("text");

                            b1.HasKey("Id", "MovieId");

                            b1.HasIndex("MovieId");

                            b1.ToTable("MovieWriters", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.Navigation("Cast");

                    b.Navigation("Directors");

                    b.Navigation("Producers");

                    b.Navigation("Writers");
                });
#pragma warning restore 612, 618
        }
    }
}
