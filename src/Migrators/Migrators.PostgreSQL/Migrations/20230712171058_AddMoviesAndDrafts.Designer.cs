// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScreenDrafts.Api.Persistence;

#nullable disable

namespace Migrators.PostgreSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230712171058_AddMoviesAndDrafts")]
    partial class AddMoviesAndDrafts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DraftDrafter", b =>
                {
                    b.Property<string>("DraftersId")
                        .HasColumnType("text")
                        .HasColumnName("drafters_id");

                    b.Property<string>("DraftsId")
                        .HasColumnType("text")
                        .HasColumnName("drafts_id");

                    b.HasKey("DraftersId", "DraftsId")
                        .HasName("pk_draft_drafter");

                    b.HasIndex("DraftsId")
                        .HasDatabaseName("ix_draft_drafter_drafts_id");

                    b.ToTable("draft_drafter", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DraftAggregate.Draft", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CoHostId")
                        .HasColumnType("text")
                        .HasColumnName("co_host_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("DraftType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("draft_type");

                    b.Property<string>("EpisodeNumber")
                        .HasColumnType("text")
                        .HasColumnName("episode_number");

                    b.Property<string>("MainHostId")
                        .HasColumnType("text")
                        .HasColumnName("main_host_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("MovieId")
                        .HasColumnType("text")
                        .HasColumnName("movie_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("NumberOfDrafters")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_drafters");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer")
                        .HasColumnName("runtime");

                    b.HasKey("Id")
                        .HasName("pk_drafts");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("ix_drafts_movie_id");

                    b.ToTable("Drafts", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DraftAggregate.Entities.SelectedMovie", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("DraftId")
                        .HasColumnType("text")
                        .HasColumnName("draft_id");

                    b.Property<int>("DraftPosition")
                        .HasColumnType("integer")
                        .HasColumnName("draft_position");

                    b.Property<string>("DrafterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("drafter_id");

                    b.Property<string>("DrafterWhoPlayedVetoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("drafter_who_played_veto_id");

                    b.Property<string>("DrafterWhoPlayedVetoOverrideId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("drafter_who_played_veto_override_id");

                    b.Property<bool>("IsVetoed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vetoed");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("MovieId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movie_id");

                    b.Property<bool>("WasCommissonerOverride")
                        .HasColumnType("boolean")
                        .HasColumnName("was_commissoner_override");

                    b.Property<bool>("WasVetoOverride")
                        .HasColumnType("boolean")
                        .HasColumnName("was_veto_override");

                    b.HasKey("Id")
                        .HasName("pk_selected_movies");

                    b.HasIndex("DraftId")
                        .HasDatabaseName("ix_selected_movies_draft_id");

                    b.HasIndex("DrafterId")
                        .HasDatabaseName("ix_selected_movies_drafter_id");

                    b.HasIndex("DrafterWhoPlayedVetoId")
                        .HasDatabaseName("ix_selected_movies_drafter_who_played_veto_id");

                    b.HasIndex("DrafterWhoPlayedVetoOverrideId")
                        .HasDatabaseName("ix_selected_movies_drafter_who_played_veto_override_id");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("ix_selected_movies_movie_id");

                    b.ToTable("selected_movies", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DrafterEntity.Drafter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool?>("HasRolloverVeto")
                        .HasColumnType("boolean")
                        .HasColumnName("has_rollover_veto");

                    b.Property<bool?>("HasRolloverVetooverride")
                        .HasColumnType("boolean")
                        .HasColumnName("has_rollover_vetooverride");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_drafters");

                    b.ToTable("Drafters", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.HostEntitty.Host", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("DraftId")
                        .HasColumnType("text")
                        .HasColumnName("draft_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<int?>("PredictionPoints")
                        .HasColumnType("integer")
                        .HasColumnName("prediction_points");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_hosts");

                    b.HasIndex("DraftId")
                        .HasDatabaseName("ix_hosts_draft_id");

                    b.ToTable("Hosts", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("ObjectId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("object_id");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.MovieAggregate.Movie", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Director")
                        .HasColumnType("text")
                        .HasColumnName("director");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("ImdbUrl")
                        .HasColumnType("text")
                        .HasColumnName("imdb_url");

                    b.Property<bool?>("IsInMarqueeOfFame")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_marquee_of_fame");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Year")
                        .HasColumnType("text")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_movies");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("ScreenDrafts.Api.Persistence.Auditing.Trail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text")
                        .HasColumnName("affected_columns");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NewValues")
                        .HasColumnType("text")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .HasColumnType("text")
                        .HasColumnName("old_values");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("text")
                        .HasColumnName("primary_key");

                    b.Property<string>("TableName")
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_audit_trails");

                    b.ToTable("audit_trails", (string)null);
                });

            modelBuilder.Entity("DraftDrafter", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.DrafterEntity.Drafter", null)
                        .WithMany()
                        .HasForeignKey("DraftersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_draft_drafter_drafters_drafters_id");

                    b.HasOne("ScreenDrafts.Api.Domain.DraftAggregate.Draft", null)
                        .WithMany()
                        .HasForeignKey("DraftsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_draft_drafter_drafts_drafts_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DraftAggregate.Draft", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.MovieAggregate.Movie", null)
                        .WithMany("DraftsSelectedIn")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("fk_drafts_movies_movie_id");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DraftAggregate.Entities.SelectedMovie", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.DraftAggregate.Draft", null)
                        .WithMany("SelectedMovies")
                        .HasForeignKey("DraftId")
                        .HasConstraintName("fk_selected_movies_drafts_draft_id");

                    b.HasOne("ScreenDrafts.Api.Domain.DrafterEntity.Drafter", "Drafter")
                        .WithMany()
                        .HasForeignKey("DrafterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_selected_movies_drafters_drafter_id");

                    b.HasOne("ScreenDrafts.Api.Domain.DrafterEntity.Drafter", "DrafterWhoPlayedVeto")
                        .WithMany()
                        .HasForeignKey("DrafterWhoPlayedVetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_selected_movies_drafters_drafter_who_played_veto_id");

                    b.HasOne("ScreenDrafts.Api.Domain.DrafterEntity.Drafter", "DrafterWhoPlayedVetoOverride")
                        .WithMany()
                        .HasForeignKey("DrafterWhoPlayedVetoOverrideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_selected_movies_drafters_drafter_who_played_veto_override_id");

                    b.HasOne("ScreenDrafts.Api.Domain.MovieAggregate.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_selected_movies_movies_movie_id");

                    b.Navigation("Drafter");

                    b.Navigation("DrafterWhoPlayedVeto");

                    b.Navigation("DrafterWhoPlayedVetoOverride");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DrafterEntity.Drafter", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", "User")
                        .WithOne("Drafter")
                        .HasForeignKey("ScreenDrafts.Api.Domain.DrafterEntity.Drafter", "Id")
                        .HasConstraintName("fk_drafters_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.HostEntitty.Host", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.DraftAggregate.Draft", "Draft")
                        .WithMany("Hosts")
                        .HasForeignKey("DraftId")
                        .HasConstraintName("fk_hosts_drafts_draft_id");

                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationUser", "User")
                        .WithOne("Host")
                        .HasForeignKey("ScreenDrafts.Api.Domain.HostEntitty.Host", "Id")
                        .HasConstraintName("fk_hosts_asp_net_users_user_id");

                    b.Navigation("Draft");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("ScreenDrafts.Api.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.DraftAggregate.Draft", b =>
                {
                    b.Navigation("Hosts");

                    b.Navigation("SelectedMovies");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Drafter");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("ScreenDrafts.Api.Domain.MovieAggregate.Movie", b =>
                {
                    b.Navigation("DraftsSelectedIn");
                });
#pragma warning restore 612, 618
        }
    }
}
